{"version":3,"sources":["pages/HomePage.js","cmps/ContactList.js","pages/ContactPage.js","services/StorageService.js","services/userService.js","pages/SignupPage/SignupPage.js","services/util.service.js","services/contactService.js","pages/ContactEditPage/ContactEditPage.js","cmps/TransferFund/TransferFund.js","pages/ContactDetails.js","cmps/Chart/Chart.js","services/bitcoinService.js","pages/StatisticPage/StatisticPage.js","App.js","serviceWorker.js","store/bitcoinStore.js","store/contactStore.js","store/userStore.js","index.js","store/rootStore.js"],"names":["HomePage","inject","observer","store","_this","props","this","bitcoinStore","watchRate","userStore","getUser","user","_this$store$bitcoinSt","rate","goingUp","react_default","a","createElement","className","username","toFixed","class","coins","Math","round","Component","ContactList","_ref","contacts","map","contact","Link","to","concat","_id","key","src","pic","alt","name","contactStore","getContacts","Fragment","cmps_ContactList","StorageService","loadFromStorage","val","localStorage","getItem","JSON","parse","saveToStorage","stringify","userService","signup","storageService","isSignedUp","Promise","resolve","SignupPage","state","isLoggedIn","handleSubmit","ev","preventDefault","setState","handleNameChange","_callee","e","value","regenerator_default","wrap","_context","prev","next","target","stop","Redirect","onSubmit","type","onChange","util_service","getRandomInt","makeId","length","arguments","undefined","text","possible","i","charAt","floor","random","makeLorem","randStr","wordLength","word","_createWord","substring","toUpperCase","substr","getCurrency","currencyCode","min","max","ceil","_getRandChar","LETTERS","randIndex","parseInt","contactService","contactsDB","getContactById","id","find","saveContact","email","phone","idx","findIndex","cont","splice","utilService","push","ContactEditPage","Object","objectSpread","handleEmailChange","handlePhoneChange","match","params","placeholder","TransferFund","amount","ContactDetails","movesList","_this$state","move","console","log","_this$state2","cmps_TransferFund_TransferFund","handleChange","bind","Chart","title","data","description","color","build","bitcoinService","getBitcoinRate","getMarketPrice","getConfirmedTransactions","watchBitcoinRate","cb","getRate","asyncToGenerator","mark","sent","lastRate","abrupt","apply","interval","setInterval","clearInterval","dollars","_getRequest","_callee2","res","_context2","values","point","y","_callee3","_context3","url","axios","get","then","StatisticPage","chartsData","loading","all","chart","cmps_Chart_Chart","_this2","colors","renderChart","App","userSevice","BrowserRouter","NavLink","exact","Switch","Route","path","component","ContactPage","render","pages_SignupPage_SignupPage","assign","pages_ContactEditPage_ContactEditPage","pages_ContactDetails","Boolean","window","location","hostname","BitcoinStore","rootStore","classCallCheck","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","oldValue","observable","action","ContactStore","contactStore_descriptor","filter","computed","UserStore","userStore_descriptor","RootStore","showNavBar","configureDevtool","logEnabled","ReactDOM","index_module","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3576121f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import { Redirect } from \"react-router-dom\";\r\n// import bitcoinService from '../services/bitcoinService'\r\n// import userService from '../services/userService.js'\r\nimport { observer, inject } from 'mobx-react';\r\n// import { observable, computed } from 'mobx';\r\n\r\n@inject('store')\r\n@observer\r\nclass HomePage extends Component {\r\n    store = this.props.store;\r\n\r\n    async componentDidMount() {\r\n        // this.store.bitcoinStore.getRate();\r\n        this.store.bitcoinStore.watchRate()\r\n        this.store.userStore.getUser()\r\n    }\r\n\r\n    render() {\r\n        const { user } = this.store.userStore\r\n        const { rate, goingUp } = this.store.bitcoinStore\r\n        return (\r\n            <div className=\"home-page flex-column p-10\">\r\n                <span className=\"capitalize white-text\">hello {user.username}!</span>\r\n                <span className=\"capitalize white-text\">\r\n                    <i className=\"fab fa-bitcoin\"></i>\r\n                    BTC/USD: ${(1/rate).toFixed(4)}\r\n                        {(goingUp)? \r\n                            <i className=\"fas fa-arrow-circle-up green-text\"></i>:\r\n                            <i class=\"fas fa-arrow-circle-down red-text\"></i>}\r\n                </span>\r\n                <span className=\"capitalize white-text\">coins in wallet: {user.coins}</span>\r\n                <span className=\"capitalize white-text\">worth: <i className=\"fas fa-dollar-sign\"></i>{Math.round(user.coins * 1/rate)}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ContactList = ({contacts}) => (    \r\n    <div className=\"contact-list flex-column p-10\">\r\n    {\r\n        contacts.map(contact =>\r\n            <Link to={`/contact/${contact._id}`} key={contact._id}>\r\n                <div className=\"contact\" >\r\n                    <img className=\"circle user-icon mr-10\" src={contact.pic} alt={contact.name}></img>\r\n                    <h3>\r\n                        {contact.name}\r\n                    </h3>\r\n                </div>\r\n            </Link>\r\n            )\r\n    }\r\n    </div>\r\n)\r\n            \r\n        \r\n        \r\n\r\n\r\nexport default ContactList;","import React, { Component } from 'react';\r\n// import contactService from '../services/contactService.js'\r\nimport ContactList from '../cmps/ContactList.js'\r\n// import ContactFilter from '../cmps/ContactFilter'\r\n// import ContactDetails from '../cmps/ContactDetails.js'\r\nimport { Link } from \"react-router-dom\";\r\nimport { observer, inject } from 'mobx-react';\r\n\r\n\r\n@inject('store')\r\n@observer\r\nclass HomePage extends Component {\r\n  store = this.props.store\r\n  async componentDidMount() {\r\n    this.store.contactStore.getContacts();\r\n\r\n  }\r\n    // handleNameChange = async e => {\r\n    //     // this.setState({ nameFilter: e.target.value });\r\n    //     const {\r\n    //       target: { value }\r\n    //     } = e;\r\n    //     let contacts = await contactService.getContacts();\r\n    //     // contacts = contacts.filter(contact => contact.name.toLowerCase().includes(value.toLowerCase()))\r\n    //     ;\r\n    //  };\r\n    \r\n    render() {\r\n        var {contacts} = this.store.contactStore\r\n        return (\r\n              <React.Fragment>\r\n                {/* <ContactFilter\r\n                  value={this.state.nameFilter}\r\n                  onFilterNameChange={this.handleNameChange.bind(this)}\r\n                  // onFilterActiveChange={this.handleActiveChange}\r\n                /> */}\r\n                <Link to=\"/contact/edit/new\">\r\n                  <button>\r\n                    <i className=\"fas fa-plus\"></i>\r\n                  </button>\r\n                </Link>\r\n                <ContactList contacts={contacts}/>\r\n              </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default HomePage;","function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val)? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport default {\r\n    loadFromStorage,\r\n    saveToStorage\r\n\r\n}","import storageService from './StorageService.js'\r\nexport default {\r\n    signup,\r\n    isSignedUp,\r\n    getUser\r\n}\r\n\r\nconst key = 'bitcoinUser'\r\n\r\nfunction signup(username) {\r\n    const user = {\r\n        username,\r\n        coins: 100\r\n    }\r\n    storageService.saveToStorage(key,user)\r\n}\r\n\r\nfunction isSignedUp() {\r\n    return !!storageService.loadFromStorage(key)\r\n}\r\n\r\nfunction getUser() {\r\n    return Promise.resolve(storageService.loadFromStorage(key))\r\n}","\r\nimport React, { Component } from 'react'\r\nimport userService from '../../services/userService'\r\nimport { Redirect } from \"react-router-dom\";\r\nimport './SignupPage.css'\r\n\r\nclass SignupPage extends Component {\r\n    state= {\r\n        username: '',\r\n        isLoggedIn: false\r\n    }\r\n\r\n    handleSubmit = (ev) => {\r\n        ev.preventDefault();\r\n        userService.signup(this.state.username)\r\n        this.setState({isLoggedIn: true})\r\n        this.props.handleSubmit()\r\n    }\r\n\r\n    handleNameChange = async e => {\r\n        const {\r\n          target: { value }\r\n        } = e;\r\n        this.setState({ username: value });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoggedIn === true) {\r\n            return <Redirect to='/' />\r\n        }\r\n        return (\r\n            <div className=\"signupPage\">\r\n                Hey please sign up\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\"\r\n                        value={this.state.username}\r\n                        onChange={this.handleNameChange}\r\n                    />\r\n                    <button type=\"submit\">enter</button>\r\n                </form>\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default SignupPage\r\n","export default {\r\n    getRandomInt,\r\n    makeId,\r\n    makeLorem,\r\n    getCurrency\r\n}\r\n\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nfunction makeId(length=5) {\r\n    var text = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  \r\n    for (var i = 0; i < length; i++)\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  \r\n    return text;\r\n  }\r\n\r\nfunction getCurrency(currencyCode) {\r\n    switch(currencyCode){\r\n        case 'ILS' : \r\n            return '₪';\r\n        case 'EUR' : \r\n            return '€';\r\n        case 'USD' :\r\n            return '$';\r\n        default:\r\n            return '';\r\n    }\r\n}\r\n\r\nfunction makeLorem(length) {\r\n\r\n    var randStr = '';\r\n    while (randStr.length < length) {\r\n        var wordLength = getRandomInt(3, 6);\r\n        var word = _createWord(wordLength);\r\n\r\n        if (Math.random() > 0.9) word += ',';\r\n\r\n        randStr += word + ' ';\r\n    }\r\n    randStr = randStr.substring(0, length);\r\n    randStr = randStr[0].toUpperCase() + randStr.substr(1)\r\n\r\n    return randStr;\r\n}\r\n\r\nfunction _createWord(length) {\r\n    var word = '';\r\n    while (word.length < length) {\r\n        var randChar = _getRandChar();\r\n        word += randChar;\r\n    }\r\n\r\n    return word;\r\n}\r\n\r\nfunction _getRandChar() {\r\n    var LETTERS = 'abcdefghijklmnopqrstuvwxyz';\r\n    var randIndex = parseInt(Math.random() * LETTERS.length)\r\n    return LETTERS.charAt(randIndex);\r\n}","import storageService from './StorageService';\r\nimport utilService from './util.service';\r\nexport default {\r\n    getContacts,\r\n    getContactById,\r\n    saveContact,\r\n}\r\nconst key = 'contacts'\r\nfunction getContactById(id) {\r\n    return Promise.resolve(contactsDB.find(contact => id === contact._id))\r\n}\r\n\r\nfunction getContacts() {\r\n    let contacts = storageService.loadFromStorage(key)\r\n    if (contacts) contactsDB = contacts\r\n    else contacts = contactsDB\r\n    return Promise.resolve(contacts)\r\n}\r\n\r\nfunction saveContact(contact) {\r\n    const picNum = Math.round(Math.random() * 90)\r\n    const pic = 'https://randomuser.me/api/portraits/thumb/men/' + picNum + '.jpg'\r\n    contact = {\r\n        name: contact.name,\r\n        email: contact.email,\r\n        phone: contact.phone,\r\n        pic,\r\n        _id: contact._id\r\n    }\r\n\r\n    if (!contact._id) {\r\n        const _id = utilService.makeId(6)\r\n        contact._id = _id\r\n        contactsDB.push(contact)\r\n    } else {\r\n        const idx = contactsDB.findIndex(cont => cont._id === contact._id)\r\n        contactsDB.splice(idx,1,contact)\r\n    }\r\n    storageService.saveToStorage(key,contactsDB)\r\n}\r\n\r\nlet contactsDB = [{\r\n    _id: '123123',\r\n    name: 'Yossi Buzaglo', \r\n    pic: 'https://randomuser.me/api/portraits/thumb/men/22.jpg',\r\n    email: 'yoss@gmail.com',\r\n    phone: '054-2345678'\r\n},\r\n{\r\n    _id: '32321321',\r\n    name: 'Valeria Rodriguez',\r\n    pic: 'https://randomuser.me/api/portraits/thumb/women/22.jpg',\r\n    email: 'valerodriguez@gmail.com',\r\n    phone: '054-23487658'\r\n},\r\n{\r\n    _id: '457457',\r\n    name: 'Avner Eshta\\'ol',\r\n    pic: 'https://randomuser.me/api/portraits/thumb/men/23.jpg',\r\n    email: 'avneresh@gmail.com',\r\n    phone: '054-2365478'\r\n},\r\n{\r\n    _id: '85786',\r\n    name: 'Bugo Laritzki',\r\n    pic: 'https://randomuser.me/api/portraits/thumb/men/25.jpg',\r\n    email: 'bugolar@gmail.com',\r\n    phone: '054-4325678'\r\n}\r\n]\r\n","\r\nimport React, { Component } from 'react'\r\nimport contactService from '../../services/contactService'\r\nimport { Link } from \"react-router-dom\";\r\nimport './ContactEditPage.scss'\r\n\r\nclass ContactEditPage extends Component {\r\n    state = {\r\n        contact: {\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            _id: ''\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        const {id} = this.props.match.params;\r\n        if (id !== 'new') {\r\n            const contact = await contactService.getContactById(id)\r\n            this.setState({contact})\r\n        }\r\n    }\r\n    handleSubmit= ev => {\r\n        ev.preventDefault();\r\n        contactService.saveContact(this.state.contact)\r\n    }\r\n    handleNameChange= ev => {\r\n        this.setState({ contact: {...this.state.contact, name: ev.target.value} });\r\n    }\r\n    handleEmailChange= ev => {\r\n        this.setState({ contact: {...this.state.contact, email: ev.target.value} });\r\n    }\r\n    handlePhoneChange= ev => {\r\n        this.setState({ contact: {...this.state.contact, phone: ev.target.value} });\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <form className=\"contactEditPage flex-column\" onSubmit={this.handleSubmit}>\r\n                <Link to=\"/contacts\">\r\n                    <button type=\"button\">\r\n                        <i className=\"fas fa-arrow-left\"></i>\r\n                    </button>\r\n                </Link>\r\n                <input \r\n                onChange={this.handleNameChange}\r\n                value={this.state.contact.name}\r\n                type=\"text\" placeholder=\"name\"/>\r\n                <input\r\n                onChange={this.handleEmailChange}\r\n                value={this.state.contact.email}\r\n                type=\"email\" placeholder=\"email\"/>\r\n                <input\r\n                onChange={this.handlePhoneChange}\r\n                value={this.state.contact.phone}\r\n                type=\"text\" placeholder=\"phone\"/>\r\n                <button className=\"capitalize align-self-center\">create</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContactEditPage\r\n","\r\nimport React, { Component }  from 'react';\r\n\r\nimport './TransferFund.css'\r\n\r\nclass TransferFund extends Component {\r\n    \r\n    render() {\r\n        const {amount} = this.props\r\n        return (\r\n        <div>\r\n            Transfer moneys to {this.props.contact}\r\n            <form onSubmit={this.props.onSubmit}>\r\n                Amount: \r\n                <input\r\n                value={amount}\r\n                onChange={this.props.onChange} type=\"number\" min={0} max={100}/>\r\n                <button type=\"submit\">transfer</button>\r\n            </form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TransferFund\r\n","import React, { Component } from 'react';\r\nimport contactService from '../services/contactService'\r\nimport TransferFund from '../cmps/TransferFund'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass ContactDetails extends Component {\r\n\r\n    state = {\r\n        contact: {},\r\n        amount: 0,\r\n        movesList: []\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n        const contact = await contactService.getContactById(id)\r\n        this.setState({ contact })\r\n    }\r\n\r\n    handleSubmit(ev) {\r\n        ev.preventDefault();\r\n        // console.log('submicht',this.state.amount)\r\n        const { contact, amount } = this.state\r\n        const move = {\r\n            name: contact.name,\r\n            amount\r\n        }\r\n        const movesList = this.state.movesList\r\n        movesList.push(move)\r\n        this.setState({ movesList })\r\n        console.log(movesList)\r\n    }\r\n\r\n    handleChange(ev) {\r\n        this.setState({ amount: ev.target.value })\r\n    }\r\n\r\n    render() {\r\n        const { contact, amount, movesList } = this.state\r\n\r\n        return (\r\n            <div className=\"contact-details p-10\">\r\n                <Link to=\"/contacts\">\r\n                    <button type=\"button\">\r\n                        <i className=\"fas fa-arrow-left\"></i>\r\n                    </button>\r\n                </Link>\r\n                <img className=\"circle user-icon mr-10\" src={contact.pic} alt={contact.name}></img>\r\n                <h3>\r\n                    {contact.name}\r\n                </h3>\r\n                <h3>\r\n                    tel: {contact.phone}\r\n                </h3>\r\n                <h3>\r\n                    email: {contact.email}\r\n                </h3>\r\n                <TransferFund\r\n                    amount={amount} contact={contact.name}\r\n                    onChange={this.handleChange.bind(this)}\r\n                    onSubmit={this.handleSubmit.bind(this)}\r\n                />\r\n                <Link to={`/contact/edit/${contact._id}`}>\r\n                    Edit contact\r\n                </Link>\r\n                Your moves:\r\n                {movesList.map(move => <li key={move.amount * Math.random()}>\r\n                    Transferred {move.amount} to {move.name}\r\n                </li>)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ContactDetails;\r\n","import React from 'react';\r\nimport { Sparklines, SparklinesLine } from 'react-sparklines';\r\n\r\nimport './Chart.css'\r\n\r\nconst Chart = (props) => {\r\n  \r\n    const {title, data, description, color} = props\r\n\r\n    return (\r\n        <div className=\"chart\">\r\n          <div className=\"chart-name\">{title}</div>\r\n          <Sparklines data={data} >\r\n              <SparklinesLine color={color} />\r\n          </Sparklines>\r\n          <div className=\"chart-desc\">{description}</div>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Chart;\r\n","import axios from 'axios'\r\n\r\nexport default {\r\n    getBitcoinRate,\r\n    getMarketPrice,\r\n    getConfirmedTransactions,\r\n    watchBitcoinRate\r\n}\r\n\r\n\r\nfunction getBitcoinRate(dollars=1)  {\r\n    return _getRequest(`https://blockchain.info/tobtc?currency=USD&value=${dollars}`)\r\n}\r\n\r\nasync function getMarketPrice() {\r\n    const res = await _getRequest('https://api.blockchain.info/charts/market-price?timespan=5months&format=json&cors=true')\r\n    return {\r\n        title: res.name,\r\n        data: res.values.map(point => point.y), \r\n        description: res.description\r\n    }\r\n}\r\n\r\nasync function getConfirmedTransactions () {\r\n    const res = await _getRequest('https://api.blockchain.info/charts/n-transactions?format=json&cors=true')\r\n    return {\r\n        title: res.name,\r\n        data: res.values.map(point => point.y), \r\n        description: res.description\r\n    }\r\n}\r\n\r\nvar lastRate = null;\r\nfunction watchBitcoinRate(cb) {\r\n    const getRate = async ()=>{\r\n        let rate = await getBitcoinRate(1)\r\n        if (rate === lastRate) return;\r\n        rate = rate.toFixed(8)\r\n        \r\n        cb(+rate,+lastRate)\r\n        lastRate = rate;        \r\n    }\r\n    // Kick it off immediately and then every 4 secs\r\n    getRate();\r\n    var interval = setInterval(getRate, 1000)\r\n    return ()=>clearInterval(interval)\r\n}\r\n\r\n\r\nfunction _getRequest(url) {\r\n    return axios.get(url)\r\n        .then(res => res.data)\r\n}","import React, { Component } from 'react';\r\n\r\nimport Chart from '../../cmps/Chart';\r\n\r\nimport bitcoinService from '../../services/bitcoinService'\r\nimport './StatisticPage.css'\r\n\r\nclass StatisticPage extends Component {\r\n  \r\n  state = {\r\n    chartsData: [],\r\n    loading: true\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.setState({loading: true})\r\n    \r\n    const chartsData = await Promise.all([\r\n      bitcoinService.getMarketPrice(), \r\n      bitcoinService.getConfirmedTransactions()\r\n    ])\r\n\r\n    this.setState({chartsData, loading: false})\r\n  }\r\n\r\n  renderChart(chart, color) {\r\n    const {title, data, description} = chart\r\n\r\n    return (\r\n        <Chart title={title} \r\n              data={data} \r\n              description={description} \r\n              color={color} />\r\n    )\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading) return <div>Loading...</div>\r\n\r\n    const colors = ['blue', 'green']\r\n    return (\r\n      <div className=\"statistic-page\">\r\n         <ul>\r\n        {\r\n          this.state.chartsData.map( (chart, idx) => \r\n            <li className=\"statistic-chart\" key={idx}>{this.renderChart(chart, colors[idx])}</li>\r\n          )\r\n        }\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatisticPage;\r\n","import React, { Component } from 'react';\r\nimport HomePage from './pages/HomePage' \r\nimport ContactPage from './pages/ContactPage' \r\nimport SignupPage from './pages/SignupPage' \r\nimport ContactEditPage from './pages/ContactEditPage' \r\nimport ContactDetails from './pages/ContactDetails' \r\nimport StatisticPage from './pages/StatisticPage'\r\nimport userSevice from './services/userService.js'\r\nimport { BrowserRouter as Router, Route, NavLink, Switch, Redirect } from \"react-router-dom\";\r\n\r\nimport './assets/css/App.scss';\r\n\r\n// @inject('store')\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isSignedUp: true\r\n  }\r\n  \r\n  \r\n  async componentDidMount() {\r\n    const isSignedUp = userSevice.isSignedUp()\r\n    this.setState({isSignedUp})\r\n  }\r\n  handleSubmit() {\r\n    this.setState({isSignedUp: true})\r\n  }\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n        {this.state.isSignedUp &&\r\n          <header className=\"App-header flex space-between align-center\">\r\n            <NavLink exact to=\"/\">\r\n              <h3 className=\"capitalize pointer\">mister bitcoin</h3>\r\n            </NavLink>\r\n            <NavLink to=\"/statistics\">\r\n            <i className=\"fas fa-chart-line\"></i>\r\n            </NavLink>\r\n            <NavLink to=\"/contacts\">\r\n            <i className=\"fas fa-list-ul\"></i>\r\n            </NavLink>\r\n          </header>\r\n        }\r\n            {!this.state.isSignedUp &&\r\n              <Redirect to='/signup'/>\r\n            }\r\n          <Switch>\r\n            <Route path=\"/\" exact component={HomePage} />\r\n            <Route path=\"/contacts\" component={ContactPage} />\r\n            <Route path=\"/statistics\" component={StatisticPage} />\r\n            <Route path=\"/signup\" render={(props) => {\r\n              return <SignupPage {...props} handleSubmit={this.handleSubmit.bind(this)}/>}} />\r\n            <Route\r\n            render={props => {\r\n              return <ContactEditPage {...props} />;\r\n            }}\r\n            path=\"/contact/edit/:id\"/>\r\n            <Route\r\n            render={props => {\r\n              return <ContactDetails {...props} />;\r\n            }}\r\n            path=\"/contact/:id\"/>\r\n          </Switch>\r\n          \r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import bitcoinService from '../services/bitcoinService';\r\nimport { observable, action,  } from 'mobx';\r\n\r\nexport default class BitcoinStore {\r\n    @observable rate = null\r\n    @observable goingUp = true\r\n    @observable pastRate = 0\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n    // print(input) {\r\n    //     console.log(input)\r\n    // }\r\n    getRate= (value,oldValue) => {\r\n        // console.log(value,oldValue)\r\n        this.rate = value\r\n        this.goingUp = (value > oldValue) \r\n    }\r\n\r\n    @action \r\n    async watchRate() {\r\n        await bitcoinService.watchBitcoinRate(this.getRate)\r\n    }\r\n}","import contactService from '../services/contactService';\r\nimport { observable, computed, action } from 'mobx';\r\n\r\nexport default class ContactStore {\r\n    @observable\r\n    contacts = [];\r\n  \r\n    @computed\r\n    get contactsCount() {\r\n      return this.contacts.length;\r\n    }\r\n  \r\n    constructor(rootStore) {\r\n      this.rootStore = rootStore;\r\n    }\r\n  \r\n    @action\r\n    async getContacts(filter) {\r\n      this.contacts = await contactService.getContacts(filter);\r\n    }\r\n  }","import userService from '../services/userService';\r\nimport { observable, action } from 'mobx';\r\n\r\nexport default class UserStore {\r\n    @observable\r\n    user = {}\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore\r\n    }\r\n\r\n    @action\r\n    async getUser() {\r\n        this.user = await userService.getUser()\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import PropTypes from 'prop-types'; // ES6\r\nimport './assets/css/index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport RootStore from './store/rootStore';\r\nimport {Provider} from 'mobx-react';\r\nimport { configureDevtool } from 'mobx-react-devtools';\r\n\r\n\r\nconst rootStore = new RootStore()\r\n\r\nconfigureDevtool({\r\n    // Turn on logging changes button programmatically:\r\n    logEnabled: true,\r\n    // Turn off displaying components updates button programmatically:\r\n  //   updatesEnabled: false,\r\n    // Log only changes of type `reaction`\r\n    // (only affects top-level messages in console, not inside groups)\r\n  //   logFilter: change => change.type === 'reaction'\r\n  });\r\n\r\nReactDOM.render(\r\n                <Provider store={rootStore}>\r\n                  <App />\r\n                </Provider>\r\n, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import BitcoinStore from './bitcoinStore';\r\nimport ContactStore from './contactStore';\r\nimport UserStore from './userStore';\r\n\r\nexport default class RootStore {\r\n  showNavBar = true;\r\n  constructor() {\r\n    this.bitcoinStore = new BitcoinStore(this);\r\n    this.contactStore = new ContactStore(this);\r\n    this.userStore = new UserStore(this);\r\n  }\r\n}\r\n"],"sourceRoot":""}